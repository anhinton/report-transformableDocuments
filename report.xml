<?xml version="1.0" encoding="UTF-8"  ?>
<!DOCTYPE document [
<!ENTITY mdash "&#x2014;">
<!ENTITY ndash "&#x2013;">
<!ENTITY us "_">
<!ENTITY tilde "~">
<!ENTITY bar "|">
]>
<document xmlns:xi="http://www.w3.org/2001/XInclude">
  
  <metadata>
    <title>Transforming documents with OpenAPI pipelines</title>
    <author>
      <name>Ashley Noel Hinton</name>
      <email>ahin017@aucklanduni.ac.nz</email>
    </author>
    <author>
      <name>Paul Murrell</name>
      <email>paul@stat.auckland.ac.nz</email>
    </author>
    <affiliation>Department of Statistics, The University of Auckland</affiliation>
    <date></date>
    <description>Technical report on transforming documents using an
    OpenAPI pipeline.</description>
  </metadata>

  <body>
    <section id="introduction">
      <p>Many technologies now exist for writing a document in common
      format to be transformed into various formats for sharing. This
      report proposes that using markup, rather than common markdown
      languages, is a good fit for writing flexible human- and
      machine-readable transformable documents. The examples in this
      report use OpenAPI pipelines to perform the document
      transformations into various document formats.  The pipelines
      produced show how such a task can be split into various reusable
      modules.</p>
    </section>

    <!-- end section -->

    <section>    
      <h1>A markup transformable document format</h1>

      <p>When writing reports and articles for publication in
      journals, books, online or otherwise, an author will employ one
      of many document formats to describe the typographical and
      structural details of her document. Common formats for research
      publication include the <a
      href="https://latex-project.org/">LaTeX</a> system for producing
      printed documents, and <a
      href="https://www.w3.org/html/">HTML</a> for producing online
      documents. These and other formats allow an author to have
      low-level control over a certain type of output, but usually do
      not offer control over multiple outputs.</p>

      <p>The <a href="http://pandoc.org/index.html">Pandoc</a>
      document converter is frequently used to allow an author to
      write a document in one format and then convert to another. For
      example an author could create an HTML document and use Pandoc
      to generate a LaTeX version of this document. An author will
      gnerally write a document using the Pandoc Markdown format, and
      then use Pandoc to convert the document to one (or several)
      formats for publication.</p>

      <p>Pandoc Markdown is a variant of <a
      href="https://daringfireball.net/projects/markdown/">Markdown</a>,
      a lightweight markup language written as a simpler way to author
      HTML documents. Markdown is intended to be readable without
      conversion, and as such is written so as not to appear to
      contain markup tags or formatting. While this can makes it easy
      for an author to write a document with common formatting it
      makes it very difficult to have fine-grained control over the
      eventual output document(s).</p>

      <p>As well as needing control over the appearance and structure
      of a document, an author will often need to embed software code
      to be executed to produce the final version of the
      document. Various tools exist for executing code embedded in a
      literate document to produce the desired output. For example, an
      author can embed R code in her document and use the <a
      href="http://yihui.name/knitr/">Knitr</a> package to execute the
      R code and produce a final document. An author embeds R code in
      another document format, for example HTML or LaTeX, and
      processes the document to produce an output document in the same
      format.</p>

      <p>The <a href="http://rmarkdown.rstudio.com/">R Markdown</a>
      package combines the dynamic document processing of Knitr with the
      common authoring format of Pandoc Markdown. An author can write a
      document in Pandoc Markdown which contains embedded R code to be
      executed. The author can then execute the code and produce an
      output document for publication in one of the many formats
      available through Pandoc document conversion.</p>

      <p>It is clear that a document author has many options, and the
      implementation of R Markdown in the RStudio IDE is an indication
      that many developers in the R world at least see Markdown as a
      very useful authoring tool. The following use cases will server to
      highlight some of the drawbacks to authoring in Markdown. These
      drawbacks will inform the design of a transformable document
      solution described in this report.</p>

      <p>While Markdown can be very useful for authoring simple
      documents quickly (Markdown's creators took inspiration from the
      formatting conventions of plain text emails) an author also
      makes several sacrifices in choosing Markdown over a markup
      language like HTML. Two examples of the limitations of Markdown
      are the creating of lists and tables. List creation in Pandoc
      Markdown is desrcibed below.
      <a href="http://pandoc.org/README.html#tables">Table creation</a>
      is left as an exercise for the reader.</p>

      <p>In Pandoc Markdown a simple list is created by
      prepending a <q>*</q>, <q>+</q>, or <q>-</q> character to the
      beginning of each list item, as in the following example:</p>

      <pre><code>  * one
  * two
  * three</code></pre>
    
      <p>If an author wishes to create an embedded list, she must use
      the four space rule to indent each embedded list.</p>

      <pre><code>  * outer list 1
      - inner list 1
      - inner list 2
  * outer list 2</code></pre>

      <p>At even two levels this process is already quite complex. As
      list membership depends on whitespace it can be a frustrating
      exercise trying to make changes to a complex list, let alone
      author a list in the first place.</p>

      <p>In contrast, a author using HTML markup can indicate an
      unordered list using a<code>&lt;ul&gt;</code> element, which
      <code>&lt;li&gt;</code> elements for each item, as in the
      following code:</p>

      <pre><code><![CDATA[<ul>
  <li>one</li>
  <li>two</li>
  <li>three</li>
</ul>]]></code></pre>

      <p>Similarly, an embedded list simply nests the same structure
      inside a list structure, as in the following code:</p>

      <pre><code><![CDATA[<ul>
  <li>outer list 1
    <ul class="subList">
      <li>inner list 1</li>
      <li>inner list 2</li>
    </ul>
  </li>
  <li>outer list 2</li>
</ul>]]></code></pre>

      <p>The author does not have to count white space, and it is
      trivial to make changes to this list structure.</p>

      <p>Markdown like HTML also gives a document author more control
      over the poutput than Markdown. The author of the HTML list
      example above has used the <code>class</code> attribute to
      indicate the inner list belongs to the <q>subList</q>
      class. Using <code>class</code> an author can apply output styles
      or perform other actions on subsets of elements. When a document
      authored in Markdown is transformed to HTML its lists will be
      marked up using the same HTML list tags as above, but an author
      of a Markdown document does not have access to these
      <code>class</code> attributes for customising output. She could
      include raw HTML in her Pandoc Markdown document, but this
      limits the output types to those using HTML.</p>
  
      <p>A document author has various methods for embedding chunks of
      code in her document. For example, an author of a Knitr HTML or
      LaTeX document can enclose code chunks to be executed in
      specially formatted comments in the respective document
      languages. For example, a document author can embed and R code
      in a Knitr HTML document as in the following code:</p>

      <pre><code><![CDATA[<!-- begin.rcode
x <- rnorm(n = 10)
plot(x)
end.rcode-->]]></code></pre>

      <p>Similarly an author can embed R code in a Knitr LaTeX
      document as in the following code:</p>

      <pre><code><![CDATA[%% begin.rcode
% x <- rnorm(n = 10)
% plot(x)
%% end.rcode]]></code></pre>

      <p>A document author using the R Markdown package can enclose R
      code chunks in special <q>fenced code</q> blocks as in the
      following code:</p>

      <pre><code><![CDATA[```{r}
x <- rnorm(n = 10)
plot(x)
```]]></code></pre>

      <p>While the use of these methods for including code makes it
      quick and easy to write a document it makes it more difficult
      for an author to do extra processing to chunks of code before
      producing the a final document. In contrast, an author creating
      an HTML document might wrap R code in <code>&lt;code&gt;</code>
      elements as in the following code:</p>

      <pre><code><![CDATA[<code class="R">
  x <- rnorm(n = 10)
  plot(x)
</code>]]></code></pre>

      <p>If an author marked up code chunks in this fashion she could,
      for example, make use of tools which employ the XPATH query
      language to locate <code>&lt;code&gt;</code> elemenents and
      perform transformations. If the author gives R code chunks the
      class <q>R</q>, as in the above example, she could perform
      transformations on just the R code chunks.</p>

      <p>If an author uses Pandoc Markdown to write a document she can
      include raw HTML or raw TeX language elements to control the
      document output. These raw code sections are only processed by
      Pandoc when creating the associated output formats, and would
      otherwise be ignored. There is no simple method for creating
      custom sections or formats within Pandoc Markdown.</p>

      <p>While an author using HTML is also unable to expect new and
      custom elements to be recognised by a web browser, the fact that
      HTML is a form of XML means an author can invent her own XML
      elements for document writing. These custom elements could then
      be processed using an XML transformation tool like XSL
      Transformations to convert the custom elements to valid HTML
      code. A markup document format has the benefit of providing a
      simplified authoring format without sacrificing fine control
      when required.</p>

      <p>Markdown has proven itself to be very useful for document
      authors, and it is not the suggestion of this report that a
      markup format replace Markdown entirely. Rather this report
      proposes that in situation where Markdown is not powerful enough
      for a document author a markup format like the one described in
      the next section might provide the solution. Importantly, a well
      designed markup document should allow an author to recover a
      Markdown document as <em>output</em>, thus providing a readable
      plain text document. While a format like Markdown is designed to
      satisfy a set of <em>known</em> transformations a format based
      on markup can also satisfy future <em>unknown</em>
      transformations, e.g. extracting subsets of elements.</p>
    </section>

    <!-- end section -->

    <section>
      <h1>The <code>document</code> markup format</h1>

      <p>The transformable document format described in this report is
      an XML file with <code>document</code> as the root element. This
      document has two child elements: <code>metadata</code> and
      <code>body</code>.</p>

      <p>The <code>metadata</code> element contains the document metadata,
      with elements for the document <code>title</code> and
      <code>subtitle</code>, <code>author</code> information,
      <code>date</code> of publication, and a <code>description</code>
      section. An example <code>metadata</code> element follows:</p>

      <pre><code><xi:include href="metadataExample.xml" parse="text">
	<xi:fallback>xinclude metadataExample.html</xi:fallback>
      </xi:include></code></pre>

      <p>The <code>body</code> element contains the document's main
      content. The following elements are used in the same way as they
      are used in HTML
      (<url>https://www.w3.org/TR/html-markup/elements.html</url>):</p>

      <ul>
	<li><code>a</code> &ndash; hyperlink</li>
	<li><code>code</code> &ndash; code fragment</li>
	<li><code>em</code> &ndash; emphatic stress</li>
	<li><code>figcaption</code> &ndash; figure caption</li>
	<li><code>figure</code> &ndash; figure with optional caption</li>
	<li><code>h1</code> &ndash; heading</li>
	<li><code>h2</code> &ndash; heading</li>
	<li><code>h3</code> &ndash; heading</li>
	<li><code>img</code> &ndash; image</li>
	<li><code>li</code> &ndash; list item</li>
	<li><code>ol</code> &ndash; ordered list</li>
	<li><code>p</code> &ndash; paragraph</li>
	<li><code>pre</code> &ndash; preformatted text</li>
	<li><code>q</code> &ndash; quoted text</li>
	<li><code>section</code> &ndash; section</li>
	<li><code>strong</code> &ndash; strong importance</li>
	<li><code>ul</code> &ndash; unordered list</li>
      </ul>

      <p>The <code>&lt;url&gt;</code> element is introduced in the
      <code>document</code> format to indicate a hyperlink where to
      enclosed URL is both the href and the value. The following code
      block demonstrates the use of the <code>url</code> element:</p>

      <pre><code><xi:include href="elementsExample.xml" parse="text">
	<xi:fallback><todo>xinclude elementsExample.xml</todo></xi:fallback>
      </xi:include></code></pre>

      <p>The resulting output:</p>

      <xi:include href="elementsExample.xml" parse="xml">
	<xi:fallback><todo>xinclude elementsExample.xml</todo></xi:fallback>
      </xi:include>

      <p>The <code>document</code> XML format uses
      <code>&lt;code&gt;</code> elements to indicate blocks of
      computer code, just as in HTML. Dynamic code chunks which are to
      be executed are marked using the <code>class</code> attribute to
      <code>code</code>. For example chunks of R code which are to be
      executed used the Knitr package are wrapped in a
      <code>&lt;code&gt;</code> element with
      <code>class="knitr"</code>. An author can also provide a
      <code>name</code> attribute for the knitr code chunk, as well as
      knitr <code>options</code>. A document author can also use
      <code>CDATA</code> sections to wrap code with reserved XML
      characters. The following code demonstrates how to include an R
      code chunk to be executed with Knitr:</p>

      <pre><code><xi:include href="knitrExample.xml" parse="text">
	<xi:fallback><todo>xinclude knitrExample.xml</todo></xi:fallback>
      </xi:include></code></pre>

      <p>And the following is the result of executing this code
      chunk:</p>

      <xi:include href="knitrExample.xml" parse="xml">
	<xi:fallback><todo>xinclude knitrExample.xml</todo></xi:fallback>
      </xi:include>

      <p>The <code>document</code> format also makes use of the
      <code>include</code> element from XInclude
      (<url>http://www.w3.org/2001/XInclude</url>) namespace to
      include XML content from external files. This allows
      <code>document</code> authors to embed other documents which may
      be authored separately from the main document. There is no
      simple method of doing this directly in either HTML or Pandoc
      Markdown.</p>

      <p>The next sections describes some simple transformations which
      can be performed on the <code>document</code> markup format
      using freely available open source tools. This report was itself
      written in the <code>document</code> markup format&mdash;the
      source code is available at <url>report.xml</url>. <todo>replace
      with final full URL</todo></p>
    </section>

    <!-- end section -->

    <section>
      <h1>Transforming the <code>document</code> markup format</h1>

      <p>This section describes how freely available open source tools
      can be used to transform the <code>document</code> markup format
      in different ways. The examples include creating an HTML
      document, preparing R code chunks for executing using Knitr,
      processing XInclude elements, and some steps towards creating a
      PDF document. The command line tools <code>xsltproc</code> is
      used in the following examples, but many other tools are
      available to do the transformations described.</p>

      <h2>Transforming to HTML</h2>

      <p>The <code>document</code> markup format can be easily
      transformed into HTML using XSL Transformations
      (<url>https://www.w3.org/TR/1999/REC-xslt-19991116</url>). XSLT
      stylsheets are XML documents which describe how another XML
      document can be transformed. They can be used to produce new XML
      documents, such as HTML, or other plain text formats. The
      command line XSLT processor <code>xsltproc</code>
      (<url>http://www.xmlsoft.org/</url>) can be used to apply an
      XSLT stylesheet to an XML document to produce an HTML output
      document.</p>

      <p>As a large part of the <code>document</code> format is based
      on HTML already we do not have to desrcibe very many
      transformations in our XSLT stylesheet. We will need to
      transform the <code>metadata</code> section of the
      <code>document</code> to HTML <code>head</code> elements and an
      appropriate title section. We also need to transform our custom
      <code>&lt;url&gt;</code> elements to HTML hyperlinks.</p>

      <p>The full XSLT stylesheet used in this example can be found at
      <url>examples/documentToHtml.xsl</url>. The XSLT code used to
      transform <code>url</code> elements to HTML hyperlinks is as
      follows:</p>

      <pre><code><![CDATA[<xsl:template match="url">
  <xsl:element name="a">      
    <xsl:attribute name="href">
      <xsl:value-of select="node()"/>
    </xsl:attribute>
    <xsl:value-of select="node()"/>
  </xsl:element>
</xsl:template>]]></code></pre>

      <p>The source <code>document</code>
      <url>examples/toHtml.xml</url> contains the following XML:</p>

      <pre><code><xi:include href="examples/toHtml.xml" parse="text">
	<xi:fallback><todo>xinclude examples/toHtml.xml</todo></xi:fallback>
      </xi:include></code></pre>

      <p>This document can be transformed to HTML using the following
      call to <code>xsltproc</code>:</p>

      <pre><code>xsltproc -o examples/toHtml.html examples/documentToHtml.xsl examples/toHtml.xml</code></pre>

      <p>The resulting HTML document can be viewed at
      <url>examples/toHtml.html</url>.</p>

      <h2>Process <code>xi:include</code> elements</h2>

      <p>The <code>document</code> markup format uses XInclude
      elements (<url>http://www.w3.org/2001/XInclude</url>) to embed
      text from external documents. These elements can be processed by
      the command line tool <code>xsltproc</code>
      (<url>http://www.xmlsoft.org/</url>) can process the embedded
      documents into the output document.</p>

      <p>We will use the same XSLT stylesheet we used in the previous
      example. The source <code>document</code>
      <url>examples/processXinclude.xml</url> contains the following
      XML:</p>

      <pre><code><xi:include href="examples/processXinclude.xml" parse="text">
	<xi:fallback><todo>xinclude
	examples/processXinclude.xml</todo></xi:fallback>
      </xi:include></code></pre>

      <p>The element <code><![CDATA[<xi:include
      href="evidenceList.xml" parse="xml"/>]]></code> indicates that
      the XML included in <url>examples/evidenceList.xml</url> is to
      be included in the output document.</p>

      <p>We will add the <code>--xinclude</code> tag to our call to
      <code>xsltproc</code> to process the XInclude elements when we
      do our transformation:</p>

      <pre><code>xsltproc --xinclude -o examples/processXinclude.html examples/documentToHtml.xsl  examples/processXinclude.xml</code></pre>

      <p>The resulting HTML document can be viewed at
      <url>examples/processXinclude.html</url>.</p>

      <h2>Prepare R code chunks for Knitr</h2>

      <p>The Knitr package lets document authors embed chunks of R
      code in special comment code and execute these chunks to produce
      an output document. The use of comments to indicate code makes
      it difficult to perform custom actions on R code marked up in
      this way. The <code>document</code> markup format wraps chunks
      of R code to be executed by Knitr in <code>&lt;code
      class="knitr"&gt;</code> elements. This allows an author using
      the <code>document</code> markup format to perform any
      operations she likes on chunks of R code. An XSLT stylesheet can
      be used to transform chunks of code marked up in this fashion
      into Knitr R code chunks in a Knitr HTML document.</p>

      <p>The full XSLT stylesheet used in this example can be found at
      <url>examples/documentToRhtml.xsl</url>. The XSLT code used to
      transform <code>&lt;code class="knitr"&gt;</code> elements to
      Knitr R code chunks is as follows:</p>

      <pre><code><![CDATA[<xsl:template match="code[@class='knitr']">
  <xsl:comment><xsl:text>begin.rcode </xsl:text><xsl:value-of select="@name"/><xsl:if test="@options"><xsl:text>, </xsl:text><xsl:value-of select="@options"/></xsl:if>
  <xsl:text>&#xA;</xsl:text>
  <xsl:value-of select="node()"/>
  <xsl:text>&#xA;end.rcode</xsl:text></xsl:comment>
</xsl:template>]]></code></pre>

      <p>The source <code>document</code>
      <url>examples/knitrChunk.xml</url> contains the following
      XML:</p>

      <pre><code><xi:include href="examples/knitrChunk.xml" parse="text">
	<xi:fallback><todo>xinclude examples/knitrChunk.xml</todo></xi:fallback>
      </xi:include></code></pre>

      <p>This document can be transformed to Knitr HTML using the
      following call to <code>xsltproc</code>:</p>

      <pre><code>xsltproc -o examples/knitrChunk.Rhtml examples/documentToRhtml.xsl examples/knitrChunk.xml</code></pre>

      <p>The resulting Knitr HTML document can be viewed at
      <url>examples/knitrChunk.Rhtml</url>. This Knitr HTML document
      can be converted to HTML using the Knitr package in R:</p>

      <code class="knitr" name="rhtmlToHtml" option="eval=FALSE"><![CDATA[library(knitr)
oldwd <- setwd("examples")
knit(input = "knitrChunk.Rhtml")
setwd(oldwd)]]></code>

      <p>The resulting HTML document can be viewed at <url>examples/knitrChunk.html</url>.</p>

      <h2>A test</h2>

      <code class="knitr" name="jobbies" options="cache=FALSE"><![CDATA[x <- 1:10
plot(x)]]></code>
    </section>
	
    <section>
      <h1>Technical requirements</h1>

      <p>This is an appendix section.</p>

      <pre>Have a good

hoon
      on me</pre>
      
    </section>
  </body>
  
</document>
